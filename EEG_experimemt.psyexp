<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2024.1.1">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="" valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': 'f&quot;{randint(0, 999999):06.0f}&quot;', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="eeg_experimemt" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="Tobii Technology" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="warning" valType="code" updates="None" name="logging level"/>
    <Param val="True" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="1" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="Tobii Pro Fusion" valType="str" updates="None" name="tbModel"/>
    <Param val="120" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="instructions">
      <RoutineSettingsComponent name="instructions" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instructions" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <KeyboardComponent name="key_resp_2" plugin="None">
        <Param val="'y','n','left','right','space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_2" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="text" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="In the following images, you will see some coffee beans. Hidden amongst them, there are some lips. Your task is to locate the lips. The image will change once you look at the lips for a certain amount of time." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="Thankyou">
      <RoutineSettingsComponent name="Thankyou" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="Thankyou" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <KeyboardComponent name="key_resp_3" plugin="None">
        <Param val="'y','n','left','right','space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_3" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="thank_you_message" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="thank_you_message" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Thank you for your collaboration" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="welcome">
      <RoutineSettingsComponent name="welcome" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="welcome" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <KeyboardComponent name="key_resp" plugin="None">
        <Param val="'y','n','left','right','space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="welcome_message" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="welcome_message" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Welcome to this experiment&amp;#10;Please, start the EEG recording" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="cross">
      <RoutineSettingsComponent name="cross" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="cross" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <ImageComponent name="image_2" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="cross.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="image_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <CodeComponent name="upload_cross" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="import {Titta, helpers_tobii as helpers} from 'titta';&amp;#10;import {TalkToProLab} from 'titta/TalkToProLab';&amp;#10;import {monitors} from 'psychopy';&amp;#10;et_name = &quot;Tobii Pro Fusion&quot;;&amp;#10;dummy_mode = false;&amp;#10;project_name = null;&amp;#10;settings = Titta.get_defaults(et_name);&amp;#10;tracker = new Titta.Connect(settings);&amp;#10;if (dummy_mode) {&amp;#10;    tracker.set_dummy_mode();&amp;#10;}&amp;#10;tracker.init();&amp;#10;ttl = new TalkToProLab({&quot;project_name&quot;: project_name, &quot;dummy_mode&quot;: dummy_mode});&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function _assert(comp, msg) {&amp;#10;        function PJAssertionError(message) {&amp;#10;            this.name = &quot;PJAssertionError&quot;;&amp;#10;            this.message = (message || &quot;Custom error PJAssertionError&quot;);&amp;#10;            if (((typeof Error.captureStackTrace) === &quot;function&quot;)) {&amp;#10;                Error.captureStackTrace(this, this.constructor);&amp;#10;            } else {&amp;#10;                this.stack = new Error(message).stack;&amp;#10;            }&amp;#10;        }&amp;#10;        PJAssertionError.prototype = Object.create(Error.prototype);&amp;#10;        PJAssertionError.prototype.constructor = PJAssertionError;&amp;#10;        msg = (msg || &quot;Assertion failed.&quot;);&amp;#10;        if ((! comp)) {&amp;#10;            throw new PJAssertionError(msg);&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;_assert&quot;] = _assert;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;settings.FILENAME = expInfo[&quot;participant&quot;];&amp;#10;pid = settings.FILENAME;&amp;#10;participant_info = ttl.add_participant(pid);&amp;#10;state = ttl.get_state();&amp;#10;_pj._assert((state[&quot;state&quot;] === &quot;ready&quot;), state[&quot;state&quot;]);&amp;#10;rec = ttl.start_recording(&quot;image_viewing&quot;, participant_info[&quot;participant_id&quot;], {&quot;screen_width&quot;: 1920, &quot;screen_height&quot;: 1080});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="cross_name = &quot;cross.png&quot;;&amp;#10;im = new visual.ImageStim(psychoJS.window, {&quot;image&quot;: &quot;cross.png&quot;});&amp;#10;cross_info = [];&amp;#10;console.log(&quot;Searching media in Tobii Pro Lab&quot;);&amp;#10;if ((! ttl.find_media(cross_name))) {&amp;#10;    cross_info.push(ttl.upload_media(cross_name, &quot;image&quot;));&amp;#10;    console.log(&quot;Media not found, uploading media to Tobii Pro Lab&quot;);&amp;#10;}&amp;#10;if ((cross_info.length === 0)) {&amp;#10;    console.log(&quot;Media found, organising media to match Tobii Pro Lab&quot;);&amp;#10;    uploaded_media = ttl.list_media()[&quot;media_list&quot;];&amp;#10;    for (var m, _pj_c = 0, _pj_a = uploaded_media, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        m = _pj_a[_pj_c];&amp;#10;        if ((cross_name.slice(0, (- 4)) === m[&quot;media_name&quot;])) {&amp;#10;            cross_info.push(m);&amp;#10;        }&amp;#10;        break;&amp;#10;    }&amp;#10;}&amp;#10;timestamp = ttl.get_time_stamp();&amp;#10;t_onset = Number.parseInt(timestamp[&quot;timestamp&quot;]);&amp;#10;console.log(&quot;t_onset&quot;, t_onset);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Create Psychopy image objects and upload media to Lab&amp;#10;# Make sure the images have the same resolution as the screen&amp;#10;im_name = images&amp;#10; &amp;#10;im = visual.ImageStim(win, image = im_name)&amp;#10;media_info = []&amp;#10;# Upload media (if not already uploaded)&amp;#10;print('Searching media in Tobii Pro Lab')&amp;#10;if not ttl.find_media(im_name):&amp;#10;    media_info.append(ttl.upload_media(im_name, &quot;image&quot;))&amp;#10;    print('Media not found, uploading media to Tobii Pro Lab')&amp;#10;&amp;#10;# If the media were uploaded already, just get their names and IDs.&amp;#10;if len(media_info) == 0:&amp;#10;    print('Media found, organising media to match Tobii Pro Lab')&amp;#10;    uploaded_media = ttl.list_media()['media_list']&amp;#10;    for m in uploaded_media:&amp;#10;        if im_name[:-4] == m['media_name']:&amp;#10;            media_info.append(m)&amp;#10;        break&amp;#10;&amp;#10;timestamp = ttl.get_time_stamp()&amp;#10;t_onset = int(timestamp['timestamp'])&amp;#10;print('t_onset', t_onset)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="timestamp = ttl.get_time_stamp();&amp;#10;t_offset = Number.parseInt(timestamp[&quot;timestamp&quot;]);&amp;#10;console.log(&quot;t_offset&quot;, t_offset);&amp;#10;ttl.send_stimulus_event(rec[&quot;recording_id&quot;], t_onset.toString(), cross_info[&quot;media_id&quot;], {&quot;end_timestamp&quot;: t_offset.toString()});&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="timestamp = ttl.get_time_stamp()&amp;#10;t_offset = int(timestamp['timestamp'])&amp;#10;print('t_offset', t_offset)&amp;#10;&amp;#10;i = 0&amp;#10;ttl.send_stimulus_event(rec['recording_id'],&amp;#10;                        str(t_onset),&amp;#10;                        media_info[i]['media_id'],&amp;#10;                        end_timestamp = str(t_offset))" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="upload_cross" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="trial">
      <RoutineSettingsComponent name="trial" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="trial" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <ImageComponent name="image" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$images" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <CodeComponent name="code" plugin="None">
        <Param val="from titta import Titta, helpers_tobii as helpers&amp;#10;from titta.TalkToProLab import TalkToProLab&amp;#10;from psychopy import monitors&amp;#10;&amp;#10;#%% ET settings&amp;#10;# et_name = 'Tobii Pro Spark'&amp;#10;et_name = 'Tobii Pro Fusion'&amp;#10;# et_name = 'Tobii Pro Nano'&amp;#10;# et_name = 'Tobii Pro Spectrum'&amp;#10; &amp;#10;dummy_mode = False&amp;#10;project_name = None # None or a project name that is open in Pro Lab.&amp;#10;                    # If None, the currently opened project is used.&amp;#10; &amp;#10;# Change any of the default settings?&amp;#10;settings = Titta.get_defaults(et_name)&amp;#10; &amp;#10;#%% Connect to eye tracker and calibrate (you need to do this outside of lab)&amp;#10;tracker = Titta.Connect(settings)&amp;#10;if dummy_mode:&amp;#10;    tracker.set_dummy_mode()&amp;#10;tracker.init()&amp;#10; &amp;#10;#%% Talk to Pro Lab&amp;#10;ttl = TalkToProLab(project_name=project_name,&amp;#10;                   dummy_mode=dummy_mode)" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="import {Titta, helpers_tobii as helpers} from 'titta';&amp;#10;import {TalkToProLab} from 'titta/TalkToProLab';&amp;#10;import {monitors} from 'psychopy';&amp;#10;et_name = &quot;Tobii Pro Fusion&quot;;&amp;#10;dummy_mode = false;&amp;#10;project_name = null;&amp;#10;settings = Titta.get_defaults(et_name);&amp;#10;tracker = new Titta.Connect(settings);&amp;#10;if (dummy_mode) {&amp;#10;    tracker.set_dummy_mode();&amp;#10;}&amp;#10;tracker.init();&amp;#10;ttl = new TalkToProLab({&quot;project_name&quot;: project_name, &quot;dummy_mode&quot;: dummy_mode});&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="settings.FILENAME = expInfo['participant']&amp;#10; &amp;#10;# Participant ID and Project name for Lab&amp;#10;pid = settings.FILENAME&amp;#10; &amp;#10;participant_info = ttl.add_participant(pid)&amp;#10;# Calibrate (must be done independently of Lab). You can do it either with the&amp;#10;# Psychopy build-in calibration, or you can use the Titta calibration by&amp;#10;# uncommenting the next two lines.&amp;#10;# tracker.calibrate(win)&amp;#10;# win.flip()&amp;#10; &amp;#10;#%% Recording&amp;#10; &amp;#10;# Check that Lab is ready to start a recording&amp;#10;state = ttl.get_state()&amp;#10;assert state['state'] == 'ready', state['state']&amp;#10; &amp;#10;## Start recording (Note: you have to click on the Record Tab first!)&amp;#10;rec = ttl.start_recording(&quot;image_viewing&quot;,&amp;#10;                    participant_info['participant_id'],&amp;#10;                    screen_width=1920,&amp;#10;                    screen_height=1080)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function _assert(comp, msg) {&amp;#10;        function PJAssertionError(message) {&amp;#10;            this.name = &quot;PJAssertionError&quot;;&amp;#10;            this.message = (message || &quot;Custom error PJAssertionError&quot;);&amp;#10;            if (((typeof Error.captureStackTrace) === &quot;function&quot;)) {&amp;#10;                Error.captureStackTrace(this, this.constructor);&amp;#10;            } else {&amp;#10;                this.stack = new Error(message).stack;&amp;#10;            }&amp;#10;        }&amp;#10;        PJAssertionError.prototype = Object.create(Error.prototype);&amp;#10;        PJAssertionError.prototype.constructor = PJAssertionError;&amp;#10;        msg = (msg || &quot;Assertion failed.&quot;);&amp;#10;        if ((! comp)) {&amp;#10;            throw new PJAssertionError(msg);&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;_assert&quot;] = _assert;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;settings.FILENAME = expInfo[&quot;participant&quot;];&amp;#10;pid = settings.FILENAME;&amp;#10;participant_info = ttl.add_participant(pid);&amp;#10;state = ttl.get_state();&amp;#10;_pj._assert((state[&quot;state&quot;] === &quot;ready&quot;), state[&quot;state&quot;]);&amp;#10;rec = ttl.start_recording(&quot;image_viewing&quot;, participant_info[&quot;participant_id&quot;], {&quot;screen_width&quot;: 1920, &quot;screen_height&quot;: 1080});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Create Psychopy image objects and upload media to Lab&amp;#10;# Make sure the images have the same resolution as the screen&amp;#10;im_name = images #use image path from spreadsheet, the name of the variable correspons to the name of the column in the table&amp;#10; &amp;#10;im = visual.ImageStim(win, image = im_name)&amp;#10;media_info = []&amp;#10;# Upload media (if not already uploaded)&amp;#10;print('Searching media in Tobii Pro Lab')&amp;#10;if not ttl.find_media(im_name):&amp;#10;    media_info.append(ttl.upload_media(im_name, &quot;image&quot;))&amp;#10;    print('Media not found, uploading media to Tobii Pro Lab')&amp;#10;&amp;#10;# If the media were uploaded already, just get their names and IDs.&amp;#10;if len(media_info) == 0:&amp;#10;    print('Media found, organising media to match Tobii Pro Lab')&amp;#10;    uploaded_media = ttl.list_media()['media_list']&amp;#10;    for m in uploaded_media:&amp;#10;        if im_name[:-4] == m['media_name']:&amp;#10;            media_info.append(m)&amp;#10;        break&amp;#10;&amp;#10;timestamp = ttl.get_time_stamp()&amp;#10;t_onset = int(timestamp['timestamp'])&amp;#10;print('t_onset', t_onset)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="## Stop recording&amp;#10;ttl.send_message(ttl.external_presenter_address,&amp;#10;    {&quot;operation&quot;: &quot;StopRecording&quot;})&amp;#10;win.close()&amp;#10; &amp;#10;#%% Finalize the recording&amp;#10;# Finalize recording&amp;#10;print(rec)&amp;#10;print(rec['recording_id'])&amp;#10;ttl.send_message(ttl.external_presenter_address,&amp;#10;    {&quot;operation&quot;: &quot;FinalizeRecording&quot;,&amp;#10;    &quot;recording_id&quot;: rec['recording_id']})&amp;#10;print('recording has been finalized')&amp;#10;ttl.disconnect()" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="ttl.send_message(ttl.external_presenter_address, {&quot;operation&quot;: &quot;StopRecording&quot;});&amp;#10;psychoJS.window.close();&amp;#10;console.log(rec);&amp;#10;console.log(rec[&quot;recording_id&quot;]);&amp;#10;ttl.send_message(ttl.external_presenter_address, {&quot;operation&quot;: &quot;FinalizeRecording&quot;, &quot;recording_id&quot;: rec[&quot;recording_id&quot;]});&amp;#10;console.log(&quot;recording has been finalized&quot;);&amp;#10;ttl.disconnect();&amp;#10;" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="timestamp = ttl.get_time_stamp();&amp;#10;t_offset = Number.parseInt(timestamp[&quot;timestamp&quot;]);&amp;#10;console.log(&quot;t_offset&quot;, t_offset);&amp;#10;i = 0;&amp;#10;ttl.send_stimulus_event(rec[&quot;recording_id&quot;], t_onset.toString(), media_info[i][&quot;media_id&quot;], {&quot;end_timestamp&quot;: t_offset.toString()});&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="timestamp = ttl.get_time_stamp()&amp;#10;t_offset = int(timestamp['timestamp'])&amp;#10;print('t_offset', t_offset)&amp;#10;&amp;#10;i = 0&amp;#10;ttl.send_stimulus_event(rec['recording_id'],&amp;#10;                        str(t_onset),&amp;#10;                        media_info[i]['media_id'],&amp;#10;                        end_timestamp = str(t_offset))" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="eeg_trigger" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import serial&amp;#10;port = serial.Serial(port=&quot;COM7&quot;,baudrate=2000000)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as serial from 'serial';&amp;#10;port = new serial.Serial({&quot;port&quot;: &quot;COM7&quot;, &quot;baudrate&quot;: 2000000});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="stimulus_pulse_started = false;&amp;#10;stimulus_pulse_ended = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#Mark the stimulus onset triggers as &quot;not sent&quot;&amp;#10;#at the start of the trial&amp;#10;stimulus_pulse_started = False&amp;#10;stimulus_pulse_ended = False" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="##STIMULUS TRIGGERS##&amp;#10;#Check to see if the stimulus is presented this frame&amp;#10;#and send the trigger if it is&amp;#10;if image.status == STARTED and not stimulus_pulse_started: #Change 'image' to match the name of the component that you want to send the trigger for&amp;#10;    win.callOnFlip(port.write, [0x01])&amp;#10;    stimulus_pulse_start_time = globalClock.getTime()&amp;#10;    stimulus_pulse_started  = True&amp;#10;#If it's time to end the pulse, reset the value to &quot;0&quot;&amp;#10;#so that we don't continue sending triggers on every frame&amp;#10;if stimulus_pulse_started and not stimulus_pulse_ended:&amp;#10;        if globalClock.getTime() - stimulus_pulse_start_time &gt;= 0.1:&amp;#10;            win.callOnFlip(port.write, [0x00])&amp;#10;            stimulus_pulse_ended = True&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (((image.status === PsychoJS.Status.STARTED) &amp;&amp; (! stimulus_pulse_started))) {&amp;#10;    psychoJS.window.callOnFlip(port.write, [1]);&amp;#10;    stimulus_pulse_start_time = globalClock.getTime();&amp;#10;    stimulus_pulse_started = true;&amp;#10;}&amp;#10;if ((stimulus_pulse_started &amp;&amp; (! stimulus_pulse_ended))) {&amp;#10;    if (((globalClock.getTime() - stimulus_pulse_start_time) &gt;= 0.1)) {&amp;#10;        psychoJS.window.callOnFlip(port.write, [0]);&amp;#10;        stimulus_pulse_ended = true;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="eeg_trigger" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <RegionOfInterestComponent name="target" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="False" valType="bool" updates="None" name="debug"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="look at" valType="str" updates="None" name="endRoutineOn"/>
        <Param val="1" valType="num" updates="None" name="lookDur"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="target" valType="code" updates="None" name="name"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(target_x, target_y)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="every look" valType="str" updates="None" name="save"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="None" name="shape"/>
        <Param val="(0.15, 0.15)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="roi onset" valType="str" updates="constant" name="timeRelativeTo"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </RegionOfInterestComponent>
      <KeyboardComponent name="key_resp_4" plugin="None">
        <Param val="'y','n','left','right','space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_4" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="welcome"/>
    <Routine name="instructions"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[{'images': 'img1.png', 'diff_level': 'low', 'target_x': -0.34875, 'target_y': -0.25}, {'images': 'img2.png', 'diff_level': 'high', 'target_x': 0.19125, 'target_y': -0.445}, {'images': 'img3.png', 'diff_level': 'high', 'target_x': 0.4225, 'target_y': 0.27375}, {'images': 'img4.png', 'diff_level': 'high', 'target_x': 0.859583333333333, 'target_y': 0.383333333333333}, {'images': 'img5.png', 'diff_level': 'low', 'target_x': 0.24520833333333, 'target_y': 0.645208333333333}, {'images': 'img6.png', 'diff_level': 'low', 'target_x': 0.63083333333333, 'target_y': 0.907083333333333}]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="images.xlsx" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="cross"/>
    <Routine name="trial"/>
    <LoopTerminator name="trials"/>
    <Routine name="Thankyou"/>
  </Flow>
</PsychoPy2experiment>
